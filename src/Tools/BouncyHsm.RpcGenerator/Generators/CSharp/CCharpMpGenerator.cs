using BouncyHsm.RpcGenerator.Schema;
using System.Text;

namespace BouncyHsm.RpcGenerator.Generators.CSharp;

internal class CCharpMpGenerator : IRpcGenerator
{
    private readonly StringBuilder content;
    private readonly StringBuilder handlers;
    private readonly StringBuilder abstraction;
    private readonly StringBuilder requestProcessor;
    public string Name { get; }


    public CCharpMpGenerator(string name)
    {
        this.Name = name;
        this.content = new StringBuilder();
        this.handlers = new StringBuilder();
        this.abstraction = new StringBuilder();
        this.requestProcessor = new StringBuilder();
    }


    public void Init(RpcDefinition definition)
    {
        this.InsertUsings(definition);
        this.InsertNamesoace(definition);

        this.GenerateTypes(definition);

        this.CreateHandlersFile(definition);

        this.CreateAbstractionFile(this.abstraction, definition);

        this.CreateRequestProcessor(this.requestProcessor, definition);
    }

    public void WriteToFolder(string path)
    {
        File.WriteAllText(Path.Combine(path, $"{this.Name}.Messages.cs"), this.content.ToString());
        File.WriteAllText(Path.Combine(path, $"{this.Name}.Handlers.cs"), this.handlers.ToString());
        File.WriteAllText(Path.Combine(path, $"{this.Name}.Abstraction.cs"), this.abstraction.ToString());
        File.WriteAllText(Path.Combine(path, $"{this.Name}.RequestProcessor.cs"), this.requestProcessor.ToString());
    }

    private void InsertUsings(RpcDefinition definition)
    {
        this.content.AppendLine("""
            //----------------------
            // <auto-generated>
            //     Generated by the BouncyHsm.RpcGenerator
            //     source: RpcDefinition.yaml
            // </auto-generated>
            //----------------------

            using System;
            using System.Collections.Generic;
            using System.Linq;
            using MessagePack;

            // https://github.com/neuecc/MessagePack-CSharp

            """);
    }

    private void InsertNamesoace(RpcDefinition definition)
    {
        this.content.AppendLine("namespace BouncyHsm.Core.Rpc;");
        this.content.AppendLine();
    }

    private void GenerateTypes(RpcDefinition definition)
    {
        this.content.AppendLine("#nullable enable");
        this.content.AppendLine();

        foreach (KeyValuePair<string, MessageDefinition> messageType in definition.Messages)
        {
            string typeName = messageType.Key;
            string classApendix = this.CreateClassApendix(typeName, definition);

            this.content.AppendLine("[MessagePackObject]");
            this.content.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"BouncyHsm.RpcGenerator.Generators\", \"1.2.0\")]");
            this.content.AppendLine($"public partial class {typeName}{classApendix}");
            this.content.AppendLine("{");

            int index = 0;
            foreach (KeyValuePair<string, string> fieldDefinition in messageType.Value.Fields)
            {
                string propName = fieldDefinition.Key;
                CSharpDeclaredType propType = new CSharpDeclaredType(fieldDefinition.Value);

                bool setDefault = !propType.IsNullable && propType.BaseDefinition != CSharpDeclaredType.BoolName && (!propType.IsNumericType || propType.IsArray);
                string defaultValue = "default!";
                if (setDefault)
                {
                    defaultValue = propType.BaseDefinition switch
                    {
                        CSharpDeclaredType.BinaryName => "Array.Empty<byte>()",
                        CSharpDeclaredType.StringName => "string.Empty",
                        _ when propType.IsArray => $"Array.Empty<{propType.CharpType[..^2]}>()",
                        _ => "default!"
                    };
                }

                this.content.AppendLine($"    [Key({index})]");
                this.content.AppendLine($"    public {propType.CharpType} {propName}");
                this.content.AppendLine("    {");
                this.content.AppendLine("        get;");
                this.content.AppendLine("        set;");
                this.content.AppendLine(setDefault ? $$"""    } = {{defaultValue}};""" : "    }");
                this.content.AppendLine();

                index++;
            }


            this.content.AppendLine("}");
            this.content.AppendLine();
        }
    }

    private string CreateClassApendix(string typeName, RpcDefinition definition)
    {
        List<string> interfaces = new List<string>();
        if (definition.Rpc.Any(t => t.Value.Request == typeName))
        {
            interfaces.Add("IRpcRequest");
        }

        if (definition.Rpc.Any(t => t.Value.Response == typeName))
        {
            interfaces.Add("IRpcResponse");
        }

        if (interfaces.Count == 0)
        {
            return string.Empty;
        }
        else
        {
            return string.Concat(" : ", string.Join(", ", interfaces));
        }
    }

    private void CreateAbstractionFile(StringBuilder handlerDef, RpcDefinition definition)
    {
        handlerDef.AppendLine("""
            //----------------------
            // <auto-generated>
            //     Generated by the BouncyHsm.RpcGenerator
            //     source: RpcDefinition.yaml
            // </auto-generated>
            //----------------------

            using System;
            using System.Collections.Generic;
            using System.Linq;
            using MessagePack;

            """);

        handlerDef.AppendLine("namespace BouncyHsm.Core.Rpc;");


        handlerDef.AppendLine("""

            #nullable enable

            public partial interface IRpcRequest
            {
            }

            public partial interface IRpcResponse
            {
            }

            public interface IRpcRequestHandler<TRequest, TResponse>
            {
                Task<TResponse> Handle(TRequest request, CancellationToken cancellationToken);
            }

            public struct PipelineContext
            {
               public string OperationName
               {
                  get;
               }

               public string? RequestId
               {
                 get;
               }

               public Type HandlerType
               {
                  get;
               }

               public CancellationToken RequestCancelled
               {
                 get;
               }

               public PipelineContext(string operationName, string? requestId, Type handlerType, CancellationToken requestCancelled)
               {
                  this.OperationName = operationName;
                  this.RequestId = requestId;
                  this.HandlerType = handlerType;
                  this.RequestCancelled = requestCancelled;
               }
            }

            public interface IRpcPipeline<TRequest, TResponse>
            {
                Task<TResponse> Process(PipelineContext context, TRequest request, Func<TRequest, Task<TResponse>> next);
            }

            """);

    }
    private void CreateHandlersFile(RpcDefinition definition)
    {
        this.handlers.AppendLine("""
            //----------------------
            // <auto-generated>
            //     Generated by the BouncyHsm.RpcGenerator
            //     source: RpcDefinition.yaml
            // </auto-generated>
            //----------------------

            using System;
            using System.Collections.Generic;
            using System.Linq;
            using BouncyHsm.Core.Rpc;

            // https://github.com/neuecc/MessagePack-CSharp

            """);

        this.handlers.AppendLine("namespace BouncyHsm.Core.Services.P11Handlers;");
        this.handlers.AppendLine();

        this.handlers.AppendLine("""
            #nullable enable

            """);

        foreach (KeyValuePair<string, RpcMethodDefinition> rpc in definition.Rpc)
        {
            string callName = rpc.Key;
            string requestType = rpc.Value.Request;
            string responseType = rpc.Value.Response;

            this.handlers.AppendLine($$"""
                public partial class {{callName}}Handler : IRpcRequestHandler<{{requestType}}, {{responseType}}>
                {
                   // Implement in another class
                }

                """);
        }

        this.CreateDiRegistration(this.handlers, definition);
    }

    private void CreateRequestProcessor(StringBuilder requestProcessor, RpcDefinition definition)
    {
        requestProcessor.AppendLine("""
            //----------------------
            // <auto-generated>
            //     Generated by the BouncyHsm.RpcGenerator
            //     source: RpcDefinition.yaml
            // </auto-generated>
            //----------------------

            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Threading.Tasks;
            using Microsoft.Extensions.Logging;
            using System.Buffers;

            """);

        requestProcessor.AppendLine("namespace BouncyHsm.Core.Rpc;");
        requestProcessor.AppendLine();

        requestProcessor.AppendLine($$"""

            #nullable enable
            
            public static partial class RequestProcessor
            {

               [System.CodeDom.Compiler.GeneratedCode("BouncyHsm.RpcGenerator.Generators", "1.0.0")]
               private static Task<IMemoryOwner<byte>> ProcessRequestInternal(IServiceProvider serviceProvider, HeaderStructure header, ReadOnlyMemory<byte> requestBody, ILogger logger, CancellationToken cancellationToken)
               {
                  return header.Operation switch
                  {
            """);

        foreach (KeyValuePair<string, RpcMethodDefinition> rpc in definition.Rpc)
        {
            string operation = rpc.Key;
            string requestType = rpc.Value.Request;
            string responseType = rpc.Value.Response;

            requestProcessor.AppendLine($$"""
                        "{{operation}}" => ProcessRequestBody<{{requestType}}, {{responseType}}>(serviceProvider, "{{operation}}", requestBody, static ckRv => new {{responseType}}(){ Rv = ckRv }, logger, cancellationToken),
                """);
        }

        requestProcessor.AppendLine($$"""
                      _ => throw new InvalidOperationException($"RPC operation {header.Operation} is not supported.")
                  };
               }
            }
            """);
    }

    private void CreateDiRegistration(StringBuilder handlers, RpcDefinition definition)
    {
        handlers.AppendLine($$"""
            [System.CodeDom.Compiler.GeneratedCode("BouncyHsm.RpcGenerator.Generators", "1.0.0")]
            public static partial class RpcDefinitionUtils
            {

               public static IReadOnlyDictionary<Type, Type> GetRegistrations()
               {

                  return new Dictionary<Type, Type>()
                  {
            """);

        foreach (KeyValuePair<string, RpcMethodDefinition> rpc in definition.Rpc)
        {
            string callName = rpc.Key;
            string requestType = rpc.Value.Request;
            string responseType = rpc.Value.Response;

            handlers.AppendLine($$"""
                         { typeof(IRpcRequestHandler<{{requestType}}, {{responseType}}>), typeof({{callName}}Handler)},
                """);
        }

        handlers.AppendLine($$"""
                   };
                }
            }
            """);
    }
}
