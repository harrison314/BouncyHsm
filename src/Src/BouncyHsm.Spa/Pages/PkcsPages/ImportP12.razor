@page "/Slots/{SlotId:int}/Pkcs/ImportP12"
@using BouncyHsm.Spa.Pages.Pkcs;
@using BouncyHsm.Client
@using BouncyHsm.Spa.Utils;
@inject IBouncyHsmClient bouncyHsmClient
@inject NavigationManager Navigation
@inject ILogger<ImportP12> logger

<PageTitle>Import P12 file</PageTitle>

<h1>Import P12 file</h1>
<div class="row">
    <div class="col d-flex justify-content-end pb-3">
        <NavLink href="@($"/Slots/Detail/{this.SlotId}")" class="btn btn-outline-primary btn-w-tm" ActiveClass=""><span class="icon-zoom-in icon-1x"></span> Slot</NavLink>
        <NavLink href="@($"/Slots/{this.SlotId}/Pkcs")" class="btn btn-outline-primary btn-w-tm" ActiveClass=""><span class="icon-Approval icon-1x"></span> PKCS</NavLink>
    </div>
</div>

<div class="row">
    <div class="col-6">
        <p>Import P12/PFX file into current slot as private key, public key, certificate and eventauly cetificate chain.</p>

        @if (this.slot == null)
        {
            <LoadingIndicator />
        }
        else
        {
            <p>Import into token with label <em>@this.slot.Token.Label</em> and serial <em>@this.slot.Token.SerialNumber</em>.</p>

            @if (this.errorMessage != null)
            {
                <div class="mb-6">
                    <BouncyHsm.Spa.Shared.Common.ErrorAlert Message="@this.errorMessage" />
                </div>
            }

            <EditForm EditContext="@editContext" OnValidSubmit="@HandleSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <div class="mb-1">
                    <label for="i-ckalabel" class="form-label">CKA Label</label>
                    <InputText id="i-ckalabel" class="form-control" @bind-Value="this.model.CkaLabel" />
                    <div class="form-text">Value of CKA_LABEL.</div>
                    <ValidationMessage For="() => this.model.CkaLabel" />
                </div>

                <div class="row mb-1">
                    <label for="i-ckaid" class="form-label">CKA ID</label>

                    <div class="row">
                        <div class="col-9">
                            <InputText id="i-ckaid" class="form-control" @bind-Value="this.model.CkaIdText" />
                        </div>
                        <div class="col-3">
                            <InputSelect class="form-select" @bind-Value="this.model.CkaIdForm">
                                <option value="@BinaryForm.Utf8">UTF-8</option>
                                <option value="@BinaryForm.Hex">HEX</option>
                                <option value="@BinaryForm.Base64">Base64</option>
                            </InputSelect>
                        </div>
                    </div>

                    <div class="form-text">Value for CKA_ID.</div>
                    <ValidationMessage For="() => this.model.CkaIdText" />
                </div>

                <div class="mb-1">
                    <label for="i-importmode" class="form-label">Import mode</label>
                    <InputSelect class="form-select" @bind-Value="this.model.ImportMode" id="i-importmode">
                        <option value="@P12ImportMode.Imported">Standard import</option>
                        <option value="@P12ImportMode.Local">Import as local objects</option>
                        @if (this.slot.Token.SimulateQualifiedArea)
                        {
                            <option value="@P12ImportMode.LocalInQualifiedArea">Import as local objects in qualified area</option>
                        }
                    </InputSelect>

                    <ValidationMessage For="() => this.model.ImportMode" />
                </div>

                <div class="mb-1 form-check">
                    <InputCheckbox class="form-check-input" id="i-importchain" @bind-Value="this.model.ImportChain" />
                    <label class="form-check-label" for="i-importchain">Import certificate chain</label>
                    <ValidationMessage For="() => this.model.ImportChain" />
                </div>

                <hr />
                <div class="mb-1">
                    <label for="i-p12file" class="form-label">P12/PFX file</label>
                    <InputFile id="i-p12file" OnChange="LoadFiles" class="form-control" accept=".p12, .pfx" />
                    <div class="form-text">Certificate file.</div>
                </div>

                <div class="mb-1">
                    <label for="i-password" class="form-label">Password</label>
                    <InputText type="password" id="i-password" class="form-control" @bind-Value="this.model.Password" />
                    <div class="form-text">Password for P12/PFX file.</div>
                    <ValidationMessage For="() => this.model.Password" />
                </div>

                <div class="justify-content-end pt-4">
                    <button type="submit" class="btn btn-primary"><span class="icon-upload3 icon-1x"></span> Submit</button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {

    [Parameter]
    public int SlotId
    {
        get;
        set;
    }

    private ImportP12Model model = new ImportP12Model();
    private EditContext? editContext;
    private string? errorMessage = null;
    private IBrowserFile? file = null;
    private SlotDto? slot = null;

    protected override async Task OnInitializedAsync()
    {
        this.editContext = new EditContext(this.model);
        try
        {
            this.slot = await this.bouncyHsmClient.GetSlotAsync(this.SlotId);
        }
        catch (ApiBouncyHsmException<ProblemDetails> ex)
        {
            this.errorMessage = ex.Result.Detail ?? "Unexcepred error.";
            this.logger.LogError(ex, "Error during call GetSlotAsync.");
        }
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        if (e.FileCount == 1)
        {
            this.file = e.File;
        }
        else
        {
            this.file = null;
        }
    }

    private async Task HandleSubmit()
    {
        this.errorMessage = null;
        await Task.Yield();

        byte[] p12Content;

        if (this.file == null)
        {
            this.errorMessage = "File is not set";
            return;
        }

        using (MemoryStream ms = new MemoryStream())
        {
            using Stream fs = this.file.OpenReadStream();
            await fs.CopyToAsync(ms);

            p12Content = ms.ToArray();
        }

        ImportP12RequestDto request = new ImportP12RequestDto()
            {
                CkaLabel = this.model.CkaLabel.Trim(),
                CkaId = this.model.CkaIdForm.GetCkaId(this.model.CkaIdText.Trim()),
                ImportChain = this.model.ImportChain,
                ImportMode = this.model.ImportMode,
                Password = this.model.Password,
                Pkcs12Content = p12Content
            };

        try
        {
            await this.bouncyHsmClient.ImportP12Async(this.SlotId, request);
            this.Navigation.NavigateTo($"/Slots/{this.SlotId}/Pkcs");
        }
        catch (ApiBouncyHsmException<ProblemDetails> ex)
        {
            this.errorMessage = ex.Result.Detail ?? "Unexcepred error.";
            this.logger.LogError(ex, "Error during call ImportP12Async.");
        }
    }
}