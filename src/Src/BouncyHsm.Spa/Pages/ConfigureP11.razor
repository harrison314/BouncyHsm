@page "/ConfigureP11"
@using System.Text;

<PageTitle>Configure P11 lib</PageTitle>

<h1>Configure PKCS#11 libs</h1>
<section class="mb-3">
    <p>Here it is possible to configure the configuration string for the <em>Bouncy Hsm Pkcs11</em> native library.</p>
    <p>
        The configuration string is configured using an environment variable that must be specified before starting
        the program that uses the given library.
        <br />
        For the default values, it is not necessary to enter the environment variable.
    </p>
</section>

<div class="row mb-3">
    <div class="col-6">

        <div class="row mb-2">
            <div class="col-2">
                <label class="col-form-label">Server (IP or hostname)</label>
            </div>
            <div class="col-4">
                <input type="text" class="form-control" @bind="this.server" @bind:event="oninput" />
            </div>
            <div class="col-2">
                <label class="col-form-label">Port</label>
            </div>
            <div class="col-4">
                <input type="number" class="form-control" @bind="this.port" @bind:event="oninput" />
            </div>
        </div>

        <div class="row mb-2">
            <div class="col-2">
                <label class="col-form-label">Log taget</label>
            </div>
            <div class="col-4">
                <select @bind="this.logTarget" class="form-select">
                    <option value="NONE">NONE</option>
                    <option value="Console">Console</option>
                    <option value="ErrorConsole">ErrorConsole</option>
                    <option value="WinDebugOut">WinDebugOut</option>
                    <option value="LinuxSyslog">LinuxSyslog</option>
                </select>
            </div>
            <div class="col-2">
                <label class="col-form-label">Log level</label>
            </div>
            <div class="col-4">
                <select @bind="this.logLevel" class="form-select">
                    <option value="NONE">NONE</option>
                    <option value="ERROR">ERROR</option>
                    <option value="INFO">INFO</option>
                    <option value="TRACE">TRACE</option>
                </select>
            </div>
        </div>

        <div class="row mb-2">
            <div class="col-2">
                <label class="col-form-label">Tag</label>
            </div>
            <div class="col-4">
                <input type="text" class="form-control" @bind="this.tag" @bind:event="oninput" />
            </div>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(CreateConfiguration()))
{
    <div class="row">
        <div class="col-9">
            <h3>Configuration commands</h3>
            
            <div class="card mb-2">
                <div class="card-header">
                    <span class="icon-terminal icon-1x"></span>  cmd.exe
                    <div class="float-end"><CopyBtn Text="@this.CmdCommand" /></div>
                </div>

                <div class="card-body">
                    <code>@this.CmdCommand</code>
                </div>
            </div>

            <div class="card mb-2">
                <div class="card-header">
                    <span class="icon-terminal icon-1x"></span> Powershell
                    <div class="float-end"><CopyBtn Text="@this.PowershellCommand" /></div>
                </div>

                <div class="card-body">
                    <code>@this.PowershellCommand</code>
                </div>
            </div>

            <div class="card mb-2">
                <div class="card-header">
                    <span class="icon-terminal icon-1x"></span> bash
                    <div class="float-end"><CopyBtn Text="@this.BashCommand" /></div>
                </div>
                <div class="card-body">
                    <code>@this.BashCommand</code>
                </div>
            </div>

        </div>
    </div>
}

@code {
    private const string DefaltServer = "127.0.0.1";
    private const int DefaltPort = 8765;
    private const string DefaltLogTarget = "ErrorConsole";
    private const string DefaltLogLevel = "ERROR";
    private const string DefaltTag = "";

    private const string EnviromentVariable = "BOUNCY_HSM_CFG_STRING";

    private string server = DefaltServer;
    private int port = DefaltPort;
    private string logTarget = DefaltLogTarget;
    private string logLevel = DefaltLogLevel;
    private string tag = DefaltTag;

    private string CmdCommand
    {
        get => $"SET {EnviromentVariable}={CreateConfiguration()}";
    }

    private string PowershellCommand
    {
        get => $"$env:{EnviromentVariable} = '{CreateConfiguration()}';";
    }

    private string BashCommand
    {
        get => $"export {EnviromentVariable}=\"{CreateConfiguration()}\"";
    }

    private string CreateConfiguration()
    {
        StringBuilder sb = new StringBuilder();
        if (this.server != DefaltServer || this.port != DefaltPort)
        {
            sb.Append("Server=");
            sb.Append(this.ToMaxLen(this.server.Trim(), 255));
            sb.Append("; ");

            sb.Append("Port=");
            sb.Append(this.port.ToString());
            sb.Append("; ");
        }

        if (this.logTarget != DefaltLogTarget)
        {
            sb.Append("LogTarget=");
            sb.Append(this.logTarget);
            sb.Append("; ");
        }

        if (this.logLevel != DefaltLogLevel)
        {
            sb.Append("LogLevel=");
            sb.Append(this.logLevel);
            sb.Append("; ");
        }

        if (this.tag != DefaltTag)
        {
            sb.Append("Tag=");
            sb.Append(this.ToMaxLen(this.tag, 31));
            sb.Append("; ");
        }

        if (sb.Length > 0)
        {
            sb.Length--;
        }

        return sb.ToString();
    }

    private string ToMaxLen(string text, int maxLen)
    {
        return (text.Length > maxLen) ? text.Substring(0, maxLen) : text;
    }
}