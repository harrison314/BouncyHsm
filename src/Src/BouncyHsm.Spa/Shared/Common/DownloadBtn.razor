@using BouncyHsm.Spa.Services.Client
@using BouncyHsm.Spa.Utils
@using System.IO
@inject IJSRuntime JS
@inject ILogger<DownloadBtn> logger

<button type="button"
        class="btn btn-outline-primary btn-sm mb-1 btn-w-action-menu"
        disabled="@this.isInLoading"
        @onclick="this.OnCLick">
    @if (this.isInLoading)
    {
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    }
    else
    {
        <span class="icon-cloud-download icon-1x"></span>
    }

    @this.Text
</button>

@code {
    private bool isInLoading = false;

    [Parameter, EditorRequired]
    public string Text
    {
        get;
        set;
    } = string.Empty;

    [Parameter, EditorRequired]
    public Func<Task<ObjectContentDto>> DownloadAction
    {
        get;
        set;
    } = default!;

    private async Task OnCLick()
    {
        try
        {
            this.isInLoading = true;
            await Task.Yield();

            ObjectContentDto content = await this.DownloadAction();

            using MemoryStream ms = new MemoryStream(content.Content);
            using var streamRef = new DotNetStreamReference(stream: ms);

            await this.JS.InvokeVoidAsync("downloadFileFromStream", content.FileName, streamRef);
        }
        catch (Exception ex)
        {
            this.logger.LogError(ex, "Error during download content.");
        }
        finally
        {
            this.isInLoading = false;
        }
    }
}
